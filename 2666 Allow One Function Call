/*
Given a function fn, return a new function that is identical to the original function except that it ensures fn is called at most once.

The first time the returned function is called, it should return the same result as fn.
Every subsequent time it is called, it should return undefined.
 

Example 1:

Input: fn = (a,b,c) => (a + b + c), calls = [[1,2,3],[2,3,6]]
Output: [{"calls":1,"value":6}]
Explanation:
const onceFn = once(fn);
onceFn(1, 2, 3); // 6
onceFn(2, 3, 6); // undefined, fn was not called
Example 2:

Input: fn = (a,b,c) => (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]]
Output: [{"calls":1,"value":140}]
Explanation:
const onceFn = once(fn);
onceFn(5, 7, 4); // 140
onceFn(2, 3, 6); // undefined, fn was not called
onceFn(4, 6, 8); // undefined, fn was not called
*/

/**
 * @param {Function} fn
 * @return {Function}
 */
function once(fn) {
    let called = false;
    let result;

    return function(...args) {
        if (!called) {
            called = true;
            result = fn(...args);
            return result;
        }
        return undefined;
    };
}

// Example usage
const fn1 = (a, b, c) => a + b + c;
const calls1 = [[1, 2, 3], [2, 3, 6]];

const onceFn1 = once(fn1);
const output1 = calls1.map((args) => ({
    calls: onceFn1(...args) !== undefined ? 1 : 0,
    value: onceFn1(...args)
}));

console.log(output1);

const fn2 = (a, b, c) => a * b * c;
const calls2 = [[5, 7, 4], [2, 3, 6], [4, 6, 8]];

const onceFn2 = once(fn2);
const output2 = calls2.map((args) => ({
    calls: onceFn2(...args) !== undefined ? 1 : 0,
    value: onceFn2(...args)
}));

console.log(output2);
